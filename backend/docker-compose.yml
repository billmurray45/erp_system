version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: erp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-erp_database}
      POSTGRES_USER: ${DB_USER:-erp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-erp_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-erp_user} -d ${DB_NAME:-erp_database}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Core Service
  core-service:
    build:
      context: ./main_app
      dockerfile: Dockerfile
    container_name: erp_core_service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-True}
      - CORE_SECRET_KEY=${CORE_SECRET_KEY:-your-secret-key-here}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-erp_database}
      - DB_USER=${DB_USER:-erp_user}
      - DB_PASSWORD=${DB_PASSWORD:-erp_password}
      - ALLOWED_HOSTS=localhost,127.0.0.1,core-service,0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./main_app:/app
      - core_static:/app/static
      - core_media:/app/media
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/schemas/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # User Service
  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: erp_user_service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - DEBUG=${DEBUG:-True}
      - USER_SECRET_KEY=${USER_SECRET_KEY:-your-user-secret-key}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-erp_database}
      - DB_USER=${DB_USER:-erp_user}
      - DB_PASSWORD=${DB_PASSWORD:-erp_password}
      - CORE_SERVICE_URL=http://core-service:8000
      - ALLOWED_HOSTS=localhost,127.0.0.1,user-service,0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      core-service:
        condition: service_healthy
    volumes:
      - ./user_service:/app
      - user_static:/app/static
      - user_media:/app/media
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/users/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Product Service
  product-service:
    build:
      context: ./product_service
      dockerfile: Dockerfile
    container_name: erp_product_service
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - DEBUG=${DEBUG:-True}
      - PRODUCT_SECRET_KEY=${PRODUCT_SECRET_KEY:-your-product-secret-key}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-erp_database}
      - DB_USER=${DB_USER:-erp_user}
      - DB_PASSWORD=${DB_PASSWORD:-erp_password}
      - CORE_SERVICE_URL=http://core-service:8000
      - ALLOWED_HOSTS=localhost,127.0.0.1,product-service,0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      core-service:
        condition: service_healthy
    volumes:
      - ./product_service:/app
      - product_static:/app/static
      - product_media:/app/media
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/products/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

volumes:
  postgres_data:
    driver: local
  core_static:
    driver: local
  core_media:
    driver: local
  user_static:
    driver: local
  user_media:
    driver: local
  product_static:
    driver: local
  product_media:
    driver: local

networks:
  erp-network:
    driver: bridge